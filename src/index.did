type SleepPayload = record {
  date : text;
  quality : text;
  hoursSlept : float64;
};
type SleepRecord = record {
  id : text;
  date : text;
  quality : text;
  createdAt : nat64;
  hoursSlept : float64;
  updatedAt : opt nat64;
};
type _AzleResult = variant { Ok : SleepRecord; Err : text };
type _AzleResult_1 = variant { Ok : vec SleepRecord; Err : text };
type _AzleResult_2 = variant { Ok : float64; Err : text };
type _AzleResult_3 = variant { Ok : text; Err : text };
service : () -> {
  addSleepRecord : (SleepPayload) -> (_AzleResult);
  deleteSleepRecord : (text) -> (_AzleResult);
  deleteSleepRecordsOlderThan : (text) -> (_AzleResult_1);
  filterSleepRecordsByQuality : (text) -> (_AzleResult_1) query;
  getAverageSleepDuration : () -> (_AzleResult_2) query;
  getAverageSleepQuality : () -> (_AzleResult_3) query;
  getSleepRecord : (text) -> (_AzleResult) query;
  getSleepRecords : () -> (_AzleResult_1) query;
  getSleepRecordsByDateRange : (text, text) -> (_AzleResult_1) query;
  getTotalSleepHoursByDateRange : (text, text) -> (_AzleResult_2) query;
  paginateSleepRecords : (float64, float64) -> (_AzleResult_1) query;
  searchSleepRecordsByDate : (text) -> (_AzleResult_1) query;
  updateSleepRecord : (text, SleepPayload) -> (_AzleResult);
  updateSleepRecordHoursSlept : (text, float64) -> (_AzleResult);
  updateSleepRecordQuality : (text, text) -> (_AzleResult);
}